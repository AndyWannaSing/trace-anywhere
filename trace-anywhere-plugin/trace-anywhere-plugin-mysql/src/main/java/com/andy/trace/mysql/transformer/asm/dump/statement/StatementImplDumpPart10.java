package com.andy.trace.mysql.transformer.asm.dump.statement;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

import static org.objectweb.asm.Opcodes.AASTORE;
import static org.objectweb.asm.Opcodes.ACC_FINAL;
import static org.objectweb.asm.Opcodes.ACC_PRIVATE;
import static org.objectweb.asm.Opcodes.ACC_PROTECTED;
import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
import static org.objectweb.asm.Opcodes.ACC_STATIC;
import static org.objectweb.asm.Opcodes.ACC_SYNTHETIC;
import static org.objectweb.asm.Opcodes.ACC_VOLATILE;
import static org.objectweb.asm.Opcodes.ACONST_NULL;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.ANEWARRAY;
import static org.objectweb.asm.Opcodes.ARETURN;
import static org.objectweb.asm.Opcodes.ARRAYLENGTH;
import static org.objectweb.asm.Opcodes.ASTORE;
import static org.objectweb.asm.Opcodes.ATHROW;
import static org.objectweb.asm.Opcodes.BASTORE;
import static org.objectweb.asm.Opcodes.BIPUSH;
import static org.objectweb.asm.Opcodes.CHECKCAST;
import static org.objectweb.asm.Opcodes.DUP;
import static org.objectweb.asm.Opcodes.DUP_X1;
import static org.objectweb.asm.Opcodes.GETFIELD;
import static org.objectweb.asm.Opcodes.GETSTATIC;
import static org.objectweb.asm.Opcodes.GOTO;
import static org.objectweb.asm.Opcodes.I2B;
import static org.objectweb.asm.Opcodes.I2L;
import static org.objectweb.asm.Opcodes.IADD;
import static org.objectweb.asm.Opcodes.ICONST_0;
import static org.objectweb.asm.Opcodes.ICONST_1;
import static org.objectweb.asm.Opcodes.ICONST_2;
import static org.objectweb.asm.Opcodes.ICONST_3;
import static org.objectweb.asm.Opcodes.ICONST_4;
import static org.objectweb.asm.Opcodes.ICONST_5;
import static org.objectweb.asm.Opcodes.ICONST_M1;
import static org.objectweb.asm.Opcodes.IFEQ;
import static org.objectweb.asm.Opcodes.IFGE;
import static org.objectweb.asm.Opcodes.IFGT;
import static org.objectweb.asm.Opcodes.IFLE;
import static org.objectweb.asm.Opcodes.IFNE;
import static org.objectweb.asm.Opcodes.IFNONNULL;
import static org.objectweb.asm.Opcodes.IFNULL;
import static org.objectweb.asm.Opcodes.IF_ACMPEQ;
import static org.objectweb.asm.Opcodes.IF_ACMPNE;
import static org.objectweb.asm.Opcodes.IF_ICMPEQ;
import static org.objectweb.asm.Opcodes.IF_ICMPGE;
import static org.objectweb.asm.Opcodes.IF_ICMPLE;
import static org.objectweb.asm.Opcodes.IF_ICMPNE;
import static org.objectweb.asm.Opcodes.ILOAD;
import static org.objectweb.asm.Opcodes.IMUL;
import static org.objectweb.asm.Opcodes.INSTANCEOF;
import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.INVOKESTATIC;
import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
import static org.objectweb.asm.Opcodes.IRETURN;
import static org.objectweb.asm.Opcodes.ISTORE;
import static org.objectweb.asm.Opcodes.ISUB;
import static org.objectweb.asm.Opcodes.L2I;
import static org.objectweb.asm.Opcodes.LADD;
import static org.objectweb.asm.Opcodes.LAND;
import static org.objectweb.asm.Opcodes.LASTORE;
import static org.objectweb.asm.Opcodes.LCMP;
import static org.objectweb.asm.Opcodes.LCONST_0;
import static org.objectweb.asm.Opcodes.LCONST_1;
import static org.objectweb.asm.Opcodes.LDIV;
import static org.objectweb.asm.Opcodes.LLOAD;
import static org.objectweb.asm.Opcodes.LRETURN;
import static org.objectweb.asm.Opcodes.LSTORE;
import static org.objectweb.asm.Opcodes.LSUB;
import static org.objectweb.asm.Opcodes.LUSHR;
import static org.objectweb.asm.Opcodes.MONITORENTER;
import static org.objectweb.asm.Opcodes.MONITOREXIT;
import static org.objectweb.asm.Opcodes.NEWARRAY;
import static org.objectweb.asm.Opcodes.POP;
import static org.objectweb.asm.Opcodes.PUTFIELD;
import static org.objectweb.asm.Opcodes.RETURN;
import static org.objectweb.asm.Opcodes.SIPUSH;
import static org.objectweb.asm.Opcodes.T_BYTE;
import static org.objectweb.asm.Opcodes.T_LONG;
import static org.objectweb.asm.TypeReference.NEW;
public class StatementImplDumpPart10 {
    public static void dump(ClassWriter classWriter) {
        MethodVisitor methodVisitor;
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getLargeUpdateCount", "()J", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            Label label4 = new Label();
            methodVisitor.visitTryCatchBlock(label3, label4, label2, null);
            Label label5 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label5, label2, null);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(2138, label6);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2139, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "results", "Lcom/mysql/cj/jdbc/result/ResultSetInternalMethods;");
            Label label7 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label7);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "results", "Lcom/mysql/cj/jdbc/result/ResultSetInternalMethods;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/result/ResultSetInternalMethods", "hasRows", "()Z", true);
            methodVisitor.visitJumpInsn(IFEQ, label3);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(2140, label7);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/Object"}, 0, null);
            methodVisitor.visitLdcInsn(new Long(-1L));
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(LRETURN);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(2143, label3);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "results", "Lcom/mysql/cj/jdbc/result/ResultSetInternalMethods;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/result/ResultSetInternalMethods", "getUpdateCount", "()J", true);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitInsn(LRETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2144, label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ATHROW);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label6, label8, 0);
            methodVisitor.visitMaxs(3, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setLargeMaxRows", "(J)V", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(2149, label4);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2150, label0);
            methodVisitor.visitVarInsn(LLOAD, 1);
            methodVisitor.visitLdcInsn(new Long(50000000L));
            methodVisitor.visitInsn(LCMP);
            Label label5 = new Label();
            methodVisitor.visitJumpInsn(IFGT, label5);
            methodVisitor.visitVarInsn(LLOAD, 1);
            methodVisitor.visitInsn(LCONST_0);
            methodVisitor.visitInsn(LCMP);
            Label label6 = new Label();
            methodVisitor.visitJumpInsn(IFGE, label6);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(2151, label5);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/Object"}, 0, null);
            methodVisitor.visitLdcInsn("Statement.15");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/Messages", "getString", "(Ljava/lang/String;)Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(LLOAD, 1);
            methodVisitor.visitInvokeDynamicInsn("makeConcatWithConstants", "(Ljava/lang/String;J)Ljava/lang/String;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/StringConcatFactory", "makeConcatWithConstants", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;", false), new Object[]{"\u0001\u0001 > 50000000."});
            methodVisitor.visitLdcInsn("S1009");
            methodVisitor.visitVarInsn(ALOAD, 0);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(2152, label7);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getExceptionInterceptor", "()Lcom/mysql/cj/exceptions/ExceptionInterceptor;", false);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(2151, label8);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/jdbc/exceptions/SQLError", "createSQLException", "(Ljava/lang/String;Ljava/lang/String;Lcom/mysql/cj/exceptions/ExceptionInterceptor;)Ljava/sql/SQLException;", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(2155, label6);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(LLOAD, 1);
            methodVisitor.visitInsn(LCONST_0);
            methodVisitor.visitInsn(LCMP);
            Label label9 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label9);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(2156, label10);
            methodVisitor.visitLdcInsn(new Long(-1L));
            methodVisitor.visitVarInsn(LSTORE, 1);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(2159, label9);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(LLOAD, 1);
            methodVisitor.visitInsn(L2I);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "maxRows", "I");
            Label label11 = new Label();
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(2160, label11);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label1);
            Label label12 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label12);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 4);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(2161, label12);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitInsn(RETURN);
            Label label13 = new Label();
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label4, label13, 0);
            methodVisitor.visitLocalVariable("max", "J", null, label4, label13, 1);
            methodVisitor.visitMaxs(4, 5);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getCurrentDatabase", "()Ljava/lang/String;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2165, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getCurrentDatabase", "()Ljava/lang/String;", true);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getServerStatementId", "()J", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2169, label0);
            methodVisitor.visitLdcInsn(Type.getType("Lcom/mysql/cj/exceptions/CJOperationNotSupportedException;"));
            methodVisitor.visitLdcInsn("Statement.65");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/Messages", "getString", "(Ljava/lang/String;)Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/exceptions/ExceptionFactory", "createException", "(Ljava/lang/Class;Ljava/lang/String;)Lcom/mysql/cj/exceptions/CJException;", false);
            methodVisitor.visitTypeInsn(CHECKCAST, "com/mysql/cj/exceptions/CJOperationNotSupportedException");
            methodVisitor.visitInsn(ATHROW);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(2, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getResultSetFactory", "()Lcom/mysql/cj/protocol/ProtocolEntityFactory;", "<T::Lcom/mysql/cj/protocol/Resultset;M::Lcom/mysql/cj/protocol/Message;>()Lcom/mysql/cj/protocol/ProtocolEntityFactory<TT;TM;>;", null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2175, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "resultSetFactory", "Lcom/mysql/cj/jdbc/result/ResultSetFactory;");
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getId", "()I", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2180, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getId", "()I", true);
            methodVisitor.visitInsn(IRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setCancelStatus", "(Lcom/mysql/cj/Query$CancelStatus;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2185, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setCancelStatus", "(Lcom/mysql/cj/Query$CancelStatus;)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2186, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("cs", "Lcom/mysql/cj/Query$CancelStatus;", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "checkCancelTimeout", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2190, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "checkCancelTimeout", "()V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2191, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getSession", "()Lcom/mysql/cj/Session;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2195, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "session", "Lcom/mysql/cj/NativeSession;");
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getCancelTimeoutMutex", "()Ljava/lang/Object;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2200, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getCancelTimeoutMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "closeQuery", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2205, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label1);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2206, label2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "closeQuery", "()V", true);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2208, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(RETURN);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label3, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getResultFetchSize", "()I", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2212, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getResultFetchSize", "()I", true);
            methodVisitor.visitInsn(IRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setResultFetchSize", "(I)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2217, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setResultFetchSize", "(I)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2218, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("fetchSize", "I", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getResultType", "()Lcom/mysql/cj/protocol/Resultset$Type;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2222, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getResultType", "()Lcom/mysql/cj/protocol/Resultset$Type;", true);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setResultType", "(Lcom/mysql/cj/protocol/Resultset$Type;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2227, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setResultType", "(Lcom/mysql/cj/protocol/Resultset$Type;)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2228, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("resultSetType", "Lcom/mysql/cj/protocol/Resultset$Type;", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getTimeoutInMillis", "()J", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2232, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getTimeoutInMillis", "()J", true);
            methodVisitor.visitInsn(LRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(2, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setTimeoutInMillis", "(J)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2237, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(LLOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setTimeoutInMillis", "(J)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2238, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("timeoutInMillis", "J", null, label0, label2, 1);
            methodVisitor.visitMaxs(3, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getExecuteTime", "()J", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2242, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getExecuteTime", "()J", true);
            methodVisitor.visitInsn(LRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(2, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setExecuteTime", "(J)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2247, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(LLOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setExecuteTime", "(J)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2248, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("executeTime", "J", null, label0, label2, 1);
            methodVisitor.visitMaxs(3, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getStatementExecuting", "()Ljava/util/concurrent/atomic/AtomicBoolean;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2252, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getStatementExecuting", "()Ljava/util/concurrent/atomic/AtomicBoolean;", true);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setCurrentDatabase", "(Ljava/lang/String;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2257, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setCurrentDatabase", "(Ljava/lang/String;)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2258, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("currentDb", "Ljava/lang/String;", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "isClearWarningsCalled", "()Z", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2262, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "isClearWarningsCalled", "()Z", true);
            methodVisitor.visitInsn(IRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setClearWarningsCalled", "(Z)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2267, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setClearWarningsCalled", "(Z)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2268, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("clearWarningsCalled", "Z", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getQuery", "()Lcom/mysql/cj/Query;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2272, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getQueryAttributesBindings", "()Lcom/mysql/cj/QueryAttributesBindings;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2277, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getQueryAttributesBindings", "()Lcom/mysql/cj/QueryAttributesBindings;", true);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setAttribute", "(Ljava/lang/String;Ljava/lang/Object;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2282, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getQueryAttributesBindings", "()Lcom/mysql/cj/QueryAttributesBindings;", false);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/QueryAttributesBindings", "setAttribute", "(Ljava/lang/String;Ljava/lang/Object;)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2283, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("name", "Ljava/lang/String;", null, label0, label2, 1);
            methodVisitor.visitLocalVariable("value", "Ljava/lang/Object;", null, label0, label2, 2);
            methodVisitor.visitMaxs(3, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "clearAttributes", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2287, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getQueryAttributesBindings", "()Lcom/mysql/cj/QueryAttributesBindings;", false);
            methodVisitor.visitVarInsn(ASTORE, 1);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2288, label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label2);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(2289, label3);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/QueryAttributesBindings", "clearAttributes", "()V", true);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2291, label2);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"com/mysql/cj/QueryAttributesBindings"}, 0, null);
            methodVisitor.visitInsn(RETURN);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label4, 0);
            methodVisitor.visitLocalVariable("qab", "Lcom/mysql/cj/QueryAttributesBindings;", null, label1, label4, 1);
            methodVisitor.visitMaxs(1, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, "lambda$executeBatchUsingMultiQueries$0", "(Lcom/mysql/cj/jdbc/JdbcStatement;Lcom/mysql/cj/BindValue;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(988, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/BindValue", "getName", "()Ljava/lang/String;", true);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/BindValue", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcStatement", "setAttribute", "(Ljava/lang/String;Ljava/lang/Object;)V", true);
            methodVisitor.visitInsn(RETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("jdbcBatchedStmt", "Lcom/mysql/cj/jdbc/JdbcStatement;", null, label0, label1, 0);
            methodVisitor.visitLocalVariable("a", "Lcom/mysql/cj/BindValue;", null, label0, label1, 1);
            methodVisitor.visitMaxs(3, 2);
            methodVisitor.visitEnd();
        }
    }
}
