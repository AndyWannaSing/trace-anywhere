package com.andy.trace.mysql.transformer.asm.dump.statement;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

import static org.objectweb.asm.Opcodes.AASTORE;
import static org.objectweb.asm.Opcodes.ACC_FINAL;
import static org.objectweb.asm.Opcodes.ACC_PRIVATE;
import static org.objectweb.asm.Opcodes.ACC_PROTECTED;
import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
import static org.objectweb.asm.Opcodes.ACC_STATIC;
import static org.objectweb.asm.Opcodes.ACC_VOLATILE;
import static org.objectweb.asm.Opcodes.ACONST_NULL;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.ANEWARRAY;
import static org.objectweb.asm.Opcodes.ARETURN;
import static org.objectweb.asm.Opcodes.ARRAYLENGTH;
import static org.objectweb.asm.Opcodes.ASTORE;
import static org.objectweb.asm.Opcodes.ATHROW;
import static org.objectweb.asm.Opcodes.BASTORE;
import static org.objectweb.asm.Opcodes.BIPUSH;
import static org.objectweb.asm.Opcodes.CHECKCAST;
import static org.objectweb.asm.Opcodes.DUP;
import static org.objectweb.asm.Opcodes.DUP_X1;
import static org.objectweb.asm.Opcodes.GETFIELD;
import static org.objectweb.asm.Opcodes.GETSTATIC;
import static org.objectweb.asm.Opcodes.GOTO;
import static org.objectweb.asm.Opcodes.I2B;
import static org.objectweb.asm.Opcodes.I2L;
import static org.objectweb.asm.Opcodes.IADD;
import static org.objectweb.asm.Opcodes.ICONST_0;
import static org.objectweb.asm.Opcodes.ICONST_1;
import static org.objectweb.asm.Opcodes.ICONST_2;
import static org.objectweb.asm.Opcodes.ICONST_3;
import static org.objectweb.asm.Opcodes.ICONST_4;
import static org.objectweb.asm.Opcodes.ICONST_5;
import static org.objectweb.asm.Opcodes.ICONST_M1;
import static org.objectweb.asm.Opcodes.IFEQ;
import static org.objectweb.asm.Opcodes.IFGE;
import static org.objectweb.asm.Opcodes.IFGT;
import static org.objectweb.asm.Opcodes.IFLE;
import static org.objectweb.asm.Opcodes.IFNE;
import static org.objectweb.asm.Opcodes.IFNONNULL;
import static org.objectweb.asm.Opcodes.IFNULL;
import static org.objectweb.asm.Opcodes.IF_ACMPEQ;
import static org.objectweb.asm.Opcodes.IF_ACMPNE;
import static org.objectweb.asm.Opcodes.IF_ICMPEQ;
import static org.objectweb.asm.Opcodes.IF_ICMPGE;
import static org.objectweb.asm.Opcodes.IF_ICMPLE;
import static org.objectweb.asm.Opcodes.IF_ICMPNE;
import static org.objectweb.asm.Opcodes.ILOAD;
import static org.objectweb.asm.Opcodes.IMUL;
import static org.objectweb.asm.Opcodes.INSTANCEOF;
import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.INVOKESTATIC;
import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
import static org.objectweb.asm.Opcodes.IRETURN;
import static org.objectweb.asm.Opcodes.ISTORE;
import static org.objectweb.asm.Opcodes.ISUB;
import static org.objectweb.asm.Opcodes.L2I;
import static org.objectweb.asm.Opcodes.LADD;
import static org.objectweb.asm.Opcodes.LAND;
import static org.objectweb.asm.Opcodes.LASTORE;
import static org.objectweb.asm.Opcodes.LCMP;
import static org.objectweb.asm.Opcodes.LCONST_0;
import static org.objectweb.asm.Opcodes.LCONST_1;
import static org.objectweb.asm.Opcodes.LDIV;
import static org.objectweb.asm.Opcodes.LLOAD;
import static org.objectweb.asm.Opcodes.LRETURN;
import static org.objectweb.asm.Opcodes.LSTORE;
import static org.objectweb.asm.Opcodes.LSUB;
import static org.objectweb.asm.Opcodes.LUSHR;
import static org.objectweb.asm.Opcodes.MONITORENTER;
import static org.objectweb.asm.Opcodes.MONITOREXIT;
import static org.objectweb.asm.Opcodes.NEWARRAY;
import static org.objectweb.asm.Opcodes.POP;
import static org.objectweb.asm.Opcodes.PUTFIELD;
import static org.objectweb.asm.Opcodes.RETURN;
import static org.objectweb.asm.Opcodes.SIPUSH;
import static org.objectweb.asm.Opcodes.T_BYTE;
import static org.objectweb.asm.Opcodes.T_LONG;
import static org.objectweb.asm.TypeReference.NEW;
public class StatementImplDumpPart9 {
    public static void dump(ClassWriter classWriter) {
        MethodVisitor methodVisitor;
        {
            methodVisitor = classWriter.visitMethod(0, "setResultSetType", "(I)V", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(1966, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitFieldInsn(GETSTATIC, "com/mysql/cj/protocol/Resultset$Type", "FORWARD_ONLY", "Lcom/mysql/cj/protocol/Resultset$Type;");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/protocol/Resultset$Type", "fromValue", "(ILcom/mysql/cj/protocol/Resultset$Type;)Lcom/mysql/cj/protocol/Resultset$Type;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "setResultType", "(Lcom/mysql/cj/protocol/Resultset$Type;)V", true);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(1967, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("typeFlag", "I", null, label0, label2, 1);
            methodVisitor.visitMaxs(3, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getBatchedGeneratedKeys", "(Ljava/sql/Statement;)V", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
            Label label4 = new Label();
            Label label5 = new Label();
            Label label6 = new Label();
            methodVisitor.visitTryCatchBlock(label4, label5, label6, null);
            Label label7 = new Label();
            methodVisitor.visitTryCatchBlock(label6, label7, label6, null);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(1970, label8);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(1971, label4);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "retrieveGeneratedKeys", "Z");
            Label label9 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label9);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(1972, label10);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(1975, label0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/Statement", "getGeneratedKeys", "()Ljava/sql/ResultSet;", true);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label11 = new Label();
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(1977, label11);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/Object", "java/sql/ResultSet"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "next", "()Z", true);
            methodVisitor.visitJumpInsn(IFEQ, label1);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(1978, label12);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "batchedGeneratedKeys", "Ljava/util/ArrayList;");
            methodVisitor.visitTypeInsn(NEW, "com/mysql/cj/protocol/a/result/ByteArrayRow");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitTypeInsn(ANEWARRAY, "[B");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "getBytes", "(I)[B", true);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getExceptionInterceptor", "()Lcom/mysql/cj/exceptions/ExceptionInterceptor;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "com/mysql/cj/protocol/a/result/ByteArrayRow", "<init>", "([[BLcom/mysql/cj/exceptions/ExceptionInterceptor;)V", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitJumpInsn(GOTO, label11);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(1981, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitJumpInsn(IFNULL, label9);
            Label label13 = new Label();
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(1982, label13);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "close", "()V", true);
            methodVisitor.visitJumpInsn(GOTO, label9);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(1981, label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 4);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label14 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label14);
            Label label15 = new Label();
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(1982, label15);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "close", "()V", true);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(1984, label14);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/Throwable"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(1986, label9);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 2, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label5);
            Label label16 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label16);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(1987, label16);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitInsn(RETURN);
            Label label17 = new Label();
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLocalVariable("rs", "Ljava/sql/ResultSet;", null, label0, label9, 3);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label8, label17, 0);
            methodVisitor.visitLocalVariable("batchedStatement", "Ljava/sql/Statement;", null, label8, label17, 1);
            methodVisitor.visitMaxs(8, 6);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "getBatchedGeneratedKeys", "(I)V", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
            Label label4 = new Label();
            Label label5 = new Label();
            Label label6 = new Label();
            methodVisitor.visitTryCatchBlock(label4, label5, label6, null);
            Label label7 = new Label();
            Label label8 = new Label();
            Label label9 = new Label();
            methodVisitor.visitTryCatchBlock(label7, label8, label9, null);
            Label label10 = new Label();
            methodVisitor.visitTryCatchBlock(label9, label10, label9, null);
            Label label11 = new Label();
            methodVisitor.visitTryCatchBlock(label6, label11, label6, null);
            Label label12 = new Label();
            Label label13 = new Label();
            Label label14 = new Label();
            methodVisitor.visitTryCatchBlock(label12, label13, label14, null);
            Label label15 = new Label();
            methodVisitor.visitTryCatchBlock(label14, label15, label14, null);
            Label label16 = new Label();
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(1990, label16);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(1991, label12);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "retrieveGeneratedKeys", "Z");
            Label label17 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label17);
            Label label18 = new Label();
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(1992, label18);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(1995, label4);
            methodVisitor.visitVarInsn(ILOAD, 1);
            Label label19 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label19);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getGeneratedKeysInternal", "()Lcom/mysql/cj/jdbc/result/ResultSetInternalMethods;", false);
            Label label20 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label20);
            methodVisitor.visitLabel(label19);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/Object", "java/sql/ResultSet"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(I2L);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getGeneratedKeysInternal", "(J)Lcom/mysql/cj/jdbc/result/ResultSetInternalMethods;", false);
            methodVisitor.visitLabel(label20);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/sql/ResultSet"});
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label21 = new Label();
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(1996, label21);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "next", "()Z", true);
            methodVisitor.visitJumpInsn(IFEQ, label5);
            Label label22 = new Label();
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(1997, label22);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "batchedGeneratedKeys", "Ljava/util/ArrayList;");
            methodVisitor.visitTypeInsn(NEW, "com/mysql/cj/protocol/a/result/ByteArrayRow");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitTypeInsn(ANEWARRAY, "[B");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "getBytes", "(I)[B", true);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getExceptionInterceptor", "()Lcom/mysql/cj/exceptions/ExceptionInterceptor;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "com/mysql/cj/protocol/a/result/ByteArrayRow", "<init>", "([[BLcom/mysql/cj/exceptions/ExceptionInterceptor;)V", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "add", "(Ljava/lang/Object;)Z", false);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitJumpInsn(GOTO, label21);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(2000, label5);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "isImplicitlyClosingResults", "Z");
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2002, label0);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitJumpInsn(IFNULL, label1);
            Label label23 = new Label();
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(2003, label23);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "close", "()V", true);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2006, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "isImplicitlyClosingResults", "Z");
            Label label24 = new Label();
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(2007, label24);
            Label label25 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label25);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2006, label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 4);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "isImplicitlyClosingResults", "Z");
            Label label26 = new Label();
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(2007, label26);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(2008, label25);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitJumpInsn(GOTO, label17);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(2000, label6);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 5);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "isImplicitlyClosingResults", "Z");
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(2002, label7);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitJumpInsn(IFNULL, label8);
            Label label27 = new Label();
            methodVisitor.visitLabel(label27);
            methodVisitor.visitLineNumber(2003, label27);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/sql/ResultSet", "close", "()V", true);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(2006, label8);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 2, new Object[]{Opcodes.TOP, "java/lang/Throwable"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "isImplicitlyClosingResults", "Z");
            Label label28 = new Label();
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(2007, label28);
            Label label29 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label29);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(2006, label9);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 6);
            methodVisitor.visitLabel(label10);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "isImplicitlyClosingResults", "Z");
            Label label30 = new Label();
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLineNumber(2007, label30);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(2008, label29);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(2010, label17);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label13);
            Label label31 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label31);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 7);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label15);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label31);
            methodVisitor.visitLineNumber(2011, label31);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitInsn(RETURN);
            Label label32 = new Label();
            methodVisitor.visitLabel(label32);
            methodVisitor.visitLocalVariable("rs", "Ljava/sql/ResultSet;", null, label4, label17, 3);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label16, label32, 0);
            methodVisitor.visitLocalVariable("maxKeys", "I", null, label16, label32, 1);
            methodVisitor.visitMaxs(8, 8);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PRIVATE, "useServerFetch", "()Z", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(2014, label4);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2015, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "session", "Lcom/mysql/cj/NativeSession;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/NativeSession", "getPropertySet", "()Lcom/mysql/cj/conf/PropertySet;", false);
            methodVisitor.visitFieldInsn(GETSTATIC, "com/mysql/cj/conf/PropertyKey", "useCursorFetch", "Lcom/mysql/cj/conf/PropertyKey;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/conf/PropertySet", "getBooleanProperty", "(Lcom/mysql/cj/conf/PropertyKey;)Lcom/mysql/cj/conf/RuntimeProperty;", true);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/conf/RuntimeProperty", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Boolean");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z", false);
            Label label5 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label5);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getResultFetchSize", "()I", true);
            methodVisitor.visitJumpInsn(IFLE, label5);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "query", "Lcom/mysql/cj/Query;");
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(2016, label6);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/Query", "getResultType", "()Lcom/mysql/cj/protocol/Resultset$Type;", true);
            methodVisitor.visitFieldInsn(GETSTATIC, "com/mysql/cj/protocol/Resultset$Type", "FORWARD_ONLY", "Lcom/mysql/cj/protocol/Resultset$Type;");
            methodVisitor.visitJumpInsn(IF_ACMPNE, label5);
            methodVisitor.visitInsn(ICONST_1);
            Label label7 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label7);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/Object"}, 0, null);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{Opcodes.INTEGER});
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2015, label1);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2017, label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ATHROW);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label4, label8, 0);
            methodVisitor.visitMaxs(2, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "isClosed", "()Z", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(2022, label4);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "connection", "Lcom/mysql/cj/jdbc/JdbcConnection;");
            methodVisitor.visitVarInsn(ASTORE, 1);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(2023, label5);
            methodVisitor.visitVarInsn(ALOAD, 1);
            Label label6 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label6);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(2024, label7);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(2026, label6);
            methodVisitor.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"com/mysql/cj/jdbc/JdbcConnection"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2027, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "isClosed", "Z");
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2028, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "com/mysql/cj/jdbc/JdbcConnection", "java/lang/Object"}, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(ATHROW);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label4, label8, 0);
            methodVisitor.visitLocalVariable("locallyScopedConn", "Lcom/mysql/cj/jdbc/JdbcConnection;", null, label5, label8, 1);
            methodVisitor.visitMaxs(2, 4);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "isPoolable", "()Z", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2035, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitInsn(POP);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2036, label1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "isPoolable", "Z");
            methodVisitor.visitInsn(IRETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setPoolable", "(Z)V", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2041, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitInsn(POP);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2042, label1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "isPoolable", "Z");
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2043, label2);
            methodVisitor.visitInsn(RETURN);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label3, 0);
            methodVisitor.visitLocalVariable("poolable", "Z", null, label0, label3, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "isWrapperFor", "(Ljava/lang/Class;)Z", "(Ljava/lang/Class<*>;)Z", new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2047, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitInsn(POP);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2050, label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isInstance", "(Ljava/lang/Object;)Z", false);
            methodVisitor.visitInsn(IRETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("iface", "Ljava/lang/Class;", "Ljava/lang/Class<*>;", label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "unwrap", "(Ljava/lang/Class;)Ljava/lang/Object;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;", new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, "java/lang/ClassCastException");
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2057, label0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "cast", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2058, label2);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/ClassCastException"});
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(2059, label3);
            methodVisitor.visitLdcInsn("Common.UnableToUnwrap");
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "toString", "()Ljava/lang/String;", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/Messages", "getString", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
            methodVisitor.visitLdcInsn("S1009");
            methodVisitor.visitVarInsn(ALOAD, 0);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(2060, label4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getExceptionInterceptor", "()Lcom/mysql/cj/exceptions/ExceptionInterceptor;", false);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(2059, label5);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/jdbc/exceptions/SQLError", "createSQLException", "(Ljava/lang/String;Ljava/lang/String;Lcom/mysql/cj/exceptions/ExceptionInterceptor;)Ljava/sql/SQLException;", false);
            methodVisitor.visitInsn(ATHROW);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLocalVariable("cce", "Ljava/lang/ClassCastException;", null, label3, label6, 2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label6, 0);
            methodVisitor.visitLocalVariable("iface", "Ljava/lang/Class;", "Ljava/lang/Class<TT;>;", label0, label6, 1);
            methodVisitor.visitMaxs(5, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getLocalInfileInputStream", "()Ljava/io/InputStream;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2066, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "session", "Lcom/mysql/cj/NativeSession;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/NativeSession", "getLocalInfileInputStream", "()Ljava/io/InputStream;", false);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setLocalInfileInputStream", "(Ljava/io/InputStream;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2071, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "session", "Lcom/mysql/cj/NativeSession;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/NativeSession", "setLocalInfileInputStream", "(Ljava/io/InputStream;)V", false);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2072, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("stream", "Ljava/io/InputStream;", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "setPingTarget", "(Lcom/mysql/cj/PingTarget;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2076, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "pingTarget", "Lcom/mysql/cj/PingTarget;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(2077, label1);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label2, 0);
            methodVisitor.visitLocalVariable("pingTarget", "Lcom/mysql/cj/PingTarget;", null, label0, label2, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getExceptionInterceptor", "()Lcom/mysql/cj/exceptions/ExceptionInterceptor;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2081, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "exceptionInterceptor", "Lcom/mysql/cj/exceptions/ExceptionInterceptor;");
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PROTECTED, "containsOnDuplicateKeyInString", "(Ljava/lang/String;)Z", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2085, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "dontCheckOnDuplicateKeyUpdateInSQL", "Z");
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "rewriteBatchedStatements", "Lcom/mysql/cj/conf/RuntimeProperty;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/conf/RuntimeProperty", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Boolean");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z", false);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label2);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "session", "Lcom/mysql/cj/NativeSession;");
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(2086, label3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/NativeSession", "getServerSession", "()Lcom/mysql/cj/protocol/ServerSession;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/protocol/ServerSession", "isNoBackslashEscapesSet", "()Z", true);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mysql/cj/QueryInfo", "containsOnDuplicateKeyUpdateClause", "(Ljava/lang/String;Z)Z", false);
            methodVisitor.visitJumpInsn(IFEQ, label2);
            methodVisitor.visitInsn(ICONST_1);
            Label label4 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label4);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(2085, label4);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{Opcodes.INTEGER});
            methodVisitor.visitInsn(IRETURN);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label5, 0);
            methodVisitor.visitLocalVariable("sql", "Ljava/lang/String;", null, label0, label5, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "closeOnCompletion", "()V", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(2093, label4);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2094, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitFieldInsn(PUTFIELD, "com/mysql/cj/jdbc/StatementImpl", "closeOnCompletion", "Z");
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(2095, label5);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label1);
            Label label6 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label6);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/Object"}, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(2096, label6);
            methodVisitor.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            methodVisitor.visitInsn(RETURN);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label4, label7, 0);
            methodVisitor.visitMaxs(2, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "isCloseOnCompletion", "()Z", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            Label label1 = new Label();
            Label label2 = new Label();
            methodVisitor.visitTryCatchBlock(label0, label1, label2, null);
            Label label3 = new Label();
            methodVisitor.visitTryCatchBlock(label2, label3, label2, null);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(2100, label4);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "checkClosed", "()Lcom/mysql/cj/jdbc/JdbcConnection;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "com/mysql/cj/jdbc/JdbcConnection", "getConnectionMutex", "()Ljava/lang/Object;", true);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(MONITORENTER);
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2101, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "com/mysql/cj/jdbc/StatementImpl", "closeOnCompletion", "Z");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(2102, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/Object"}, 1, new Object[]{"java/lang/Throwable"});
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(MONITOREXIT);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ATHROW);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label4, label5, 0);
            methodVisitor.visitMaxs(2, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "executeLargeBatch", "()[J", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2107, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "executeBatchInternal", "()[J", false);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "executeLargeUpdate", "(Ljava/lang/String;)J", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2112, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "executeUpdateInternal", "(Ljava/lang/String;ZZ)J", false);
            methodVisitor.visitInsn(LRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitLocalVariable("sql", "Ljava/lang/String;", null, label0, label1, 1);
            methodVisitor.visitMaxs(4, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "executeLargeUpdate", "(Ljava/lang/String;I)J", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2117, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPNE, label1);
            methodVisitor.visitInsn(ICONST_1);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER}, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER});
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER}, 4, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER});
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "executeUpdateInternal", "(Ljava/lang/String;ZZ)J", false);
            methodVisitor.visitInsn(LRETURN);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label3, 0);
            methodVisitor.visitLocalVariable("sql", "Ljava/lang/String;", null, label0, label3, 1);
            methodVisitor.visitLocalVariable("autoGeneratedKeys", "I", null, label0, label3, 2);
            methodVisitor.visitMaxs(5, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "executeLargeUpdate", "(Ljava/lang/String;[I)J", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2122, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 2);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitJumpInsn(IFLE, label1);
            methodVisitor.visitInsn(ICONST_1);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", "[I"}, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER});
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", "[I"}, 4, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER});
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "executeUpdateInternal", "(Ljava/lang/String;ZZ)J", false);
            methodVisitor.visitInsn(LRETURN);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label3, 0);
            methodVisitor.visitLocalVariable("sql", "Ljava/lang/String;", null, label0, label3, 1);
            methodVisitor.visitLocalVariable("columnIndexes", "[I", null, label0, label3, 2);
            methodVisitor.visitMaxs(4, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "executeLargeUpdate", "(Ljava/lang/String;[Ljava/lang/String;)J", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2127, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 2);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitJumpInsn(IFLE, label1);
            methodVisitor.visitInsn(ICONST_1);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", "[Ljava/lang/String;"}, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER});
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 3, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", "[Ljava/lang/String;"}, 4, new Object[]{"com/mysql/cj/jdbc/StatementImpl", "java/lang/String", Opcodes.INTEGER, Opcodes.INTEGER});
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "executeUpdateInternal", "(Ljava/lang/String;ZZ)J", false);
            methodVisitor.visitInsn(LRETURN);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label3, 0);
            methodVisitor.visitLocalVariable("sql", "Ljava/lang/String;", null, label0, label3, 1);
            methodVisitor.visitLocalVariable("columnNames", "[Ljava/lang/String;", null, label0, label3, 2);
            methodVisitor.visitMaxs(4, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getLargeMaxRows", "()J", null, new String[]{"java/sql/SQLException"});
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(2133, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "com/mysql/cj/jdbc/StatementImpl", "getMaxRows", "()I", false);
            methodVisitor.visitInsn(I2L);
            methodVisitor.visitInsn(LRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lcom/mysql/cj/jdbc/StatementImpl;", null, label0, label1, 0);
            methodVisitor.visitMaxs(2, 1);
            methodVisitor.visitEnd();
        }
    }
}
